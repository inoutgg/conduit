// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dbsqlc

import (
	"context"

	"github.com/google/uuid"
)

const acquireLock = `-- name: AcquireLock :exec
SELECT pg_advisory_lock($1::BIGINT)
`

func (q *Queries) AcquireLock(ctx context.Context, db DBTX, lockNum int64) error {
	_, err := db.Exec(ctx, acquireLock, lockNum)
	return err
}

const allExistingMigrationVersions = `-- name: AllExistingMigrationVersions :many
SELECT version
FROM conduitmigrations
WHERE namespace = $1
ORDER BY version
`

func (q *Queries) AllExistingMigrationVersions(ctx context.Context, db DBTX, namespace string) ([]int64, error) {
	rows, err := db.Query(ctx, allExistingMigrationVersions, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var version int64
		if err := rows.Scan(&version); err != nil {
			return nil, err
		}
		items = append(items, version)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const applyMigration = `-- name: ApplyMigration :exec
INSERT INTO conduitmigrations (id, version, name, namespace)
VALUES ($1, $2, $3, $4)
`

type ApplyMigrationParams struct {
	ID        uuid.UUID
	Version   int64
	Name      string
	Namespace string
}

func (q *Queries) ApplyMigration(ctx context.Context, db DBTX, arg ApplyMigrationParams) error {
	_, err := db.Exec(ctx, applyMigration,
		arg.ID,
		arg.Version,
		arg.Name,
		arg.Namespace,
	)
	return err
}

const doesTableExist = `-- name: DoesTableExist :one
SELECT
  CASE
    WHEN to_regclass($1) IS NULL THEN FALSE
    ELSE TRUE
  END
`

func (q *Queries) DoesTableExist(ctx context.Context, db DBTX, tableName string) (bool, error) {
	row := db.QueryRow(ctx, doesTableExist, tableName)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const releaseLock = `-- name: ReleaseLock :exec
SELECT pg_advisory_unlock($1::BIGINT)
`

func (q *Queries) ReleaseLock(ctx context.Context, db DBTX, lockNum int64) error {
	_, err := db.Exec(ctx, releaseLock, lockNum)
	return err
}

const resetConn = `-- name: ResetConn :exec
RESET ALL
`

func (q *Queries) ResetConn(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, resetConn)
	return err
}

const rollbackMigration = `-- name: RollbackMigration :exec
DELETE FROM conduitmigrations
WHERE version = $1 AND namespace = $2
`

type RollbackMigrationParams struct {
	Version   int64
	Namespace string
}

func (q *Queries) RollbackMigration(ctx context.Context, db DBTX, arg RollbackMigrationParams) error {
	_, err := db.Exec(ctx, rollbackMigration, arg.Version, arg.Namespace)
	return err
}
